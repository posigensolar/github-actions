name: 'Label Trigger'

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
      event:
        required: true
        type: string
      stg-env:
        required: true
        type: string
      prd-env:
        required: true
        type: string      
    secrets:
      STG_GOOGLE_CREDENTIALS:
        required: true
      PRD_GOOGLE_CREDENTIALS:
        required: true
      token:
        required: true
      stg-projectId:
        required: true
      stg-cli-args:
        required: true
      prd-projectId:
        required: true
      prd-cli-args:
        required: true
jobs: 
  deploy-stg:
    if: contains( fromJSON(inputs.event).pull_request.labels.*.name, 'deploy-prd')
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10

     # Auth Google service account
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.STG_GOOGLE_CREDENTIALS }}'

      # Init SDK
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # Clean env

    - name: Terraform Clean All
      run: yarn tfclean

    - name: Terraform Init
      run: export TF_CLI_ARGS_init=${{secrets.stg-cli-args}} && cd terraform && terraform init

    - name: Terraform Apply
      run: cd terraform && TF_VAR_env_name='${{ inputs.stg-env }}' TF_VAR_project_id='${{ secrets.stg-projectId }}' terraform apply -auto-approve

  check-for-deploy-prd:
    needs: deploy-stg
    if: contains( fromJSON(inputs.event).pull_request.labels.*.name, 'deploy-prd') && fromJSON(inputs.event).action == 'labeled'
    outputs:
      data: ${{ steps.get_approved_prs.outputs.data }}
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Query approval status 
    - uses: octokit/request-action@v2.x
      id: get_approved_prs
      with:
        route: GET /repos/${{inputs.repository}}/pulls/${{fromJSON(inputs.event).pull_request.number}}/reviews
      env:
        GITHUB_TOKEN: ${{ secrets.token }}
  deploy-prod:
    needs: check-for-deploy-prd
    if: contains(fromJSON(needs.check-for-deploy-prd.outputs.data).*.state,'APPROVED')
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10

     # Auth Google service account
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.PRD_GOOGLE_CREDENTIALS }}'

      # Init SDK
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # Clean env

    - name: Terraform Clean All
      run: yarn tfclean

    - name: Terraform Init
      run: export TF_CLI_ARGS_init=${{secrets.prd-cli-args}} && cd terraform && terraform init

    - name: Terraform Apply
      run: cd terraform && TF_VAR_env_name='${{ inputs.prd-env }}' TF_VAR_project_id='${{ secrets.prd-projectId }}' terraform apply -auto-approve

  merge:
    needs: deploy-prod
    if: contains(fromJSON(needs.check-for-deploy-prd.outputs.data).*.state,'APPROVED')
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/juliangruber/merge-pull-request-action
      - name: Merge Pull Request
        uses: juliangruber/merge-pull-request-action@v1
        with:
          github-token: ${{ secrets.token }}
          number: ${{ fromJSON(inputs.event).pull_request.number }}
          method: squash
      - name: Delete PRs head branches
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.token }}
          numbers: ${{ fromJSON(inputs.event).pull_request.number }}
